const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

const execAsync = promisify(exec);

async function setupProject() {
  console.log('üöÄ Iniciando configura√ß√£o do projeto Mentei App...\n');

  try {
    // 1. Verificar se existe o arquivo .env.local
    const envPath = path.join(__dirname, '..', '.env.local');
    if (!fs.existsSync(envPath)) {
      console.log('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado. Criando a partir do exemplo...');
      const envExamplePath = path.join(__dirname, '..', '.env.example');
      if (fs.existsSync(envExamplePath)) {
        fs.copyFileSync(envExamplePath, envPath);
        console.log('‚úÖ Arquivo .env.local criado com sucesso!');
      } else {
        console.error('‚ùå Arquivo .env.example n√£o encontrado!');
      }
    }

    // 2. Instalar depend√™ncias
    console.log('\nüì¶ Instalando depend√™ncias...');
    await execAsync('npm install');
    console.log('‚úÖ Depend√™ncias instaladas!');

    // 3. Gerar Prisma Client
    console.log('\nüîß Gerando Prisma Client...');
    await execAsync('npx prisma generate');
    console.log('‚úÖ Prisma Client gerado!');

    // 4. Criar banco de dados e migra√ß√µes
    console.log('\nüóÉÔ∏è  Criando banco de dados e aplicando migra√ß√µes...');
    try {
      // Tentar criar as migra√ß√µes
      await execAsync('npx prisma migrate dev --name init');
      console.log('‚úÖ Migra√ß√µes aplicadas com sucesso!');
    } catch (migrateError) {
      console.log('‚ö†Ô∏è  Erro ao aplicar migra√ß√µes. Tentando push direto...');
      await execAsync('npx prisma db push');
      console.log('‚úÖ Schema sincronizado com o banco!');
    }

    // 5. Seed do banco de dados (se existir)
    const seedPath = path.join(__dirname, '..', 'prisma', 'seed.js');
    if (fs.existsSync(seedPath)) {
      console.log('\nüå± Aplicando seed no banco de dados...');
      try {
        await execAsync('node prisma/seed.js');
        console.log('‚úÖ Seed aplicado com sucesso!');
      } catch (seedError) {
        console.log('‚ö†Ô∏è  Erro ao aplicar seed:', seedError.message);
      }
    }

    // 6. Corrigir problemas de importa√ß√£o
    console.log('\nüîß Corrigindo problemas de importa√ß√£o...');
    const fixHeroiconsScript = path.join(__dirname, 'fix-heroicons-imports.js');
    if (fs.existsSync(fixHeroiconsScript)) {
      await execAsync('node scripts/fix-heroicons-imports.js');
      console.log('‚úÖ Importa√ß√µes corrigidas!');
    }

    // 7. Criar diret√≥rios necess√°rios
    console.log('\nüìÅ Criando diret√≥rios necess√°rios...');
    const dirsToCreate = [
      'public/images',
      'public/uploads',
      'src/generated/prisma'
    ];
    
    for (const dir of dirsToCreate) {
      const dirPath = path.join(__dirname, '..', dir);
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`‚úÖ Diret√≥rio criado: ${dir}`);
      }
    }

    // 8. Verificar se tudo est√° funcionando
    console.log('\nüîç Verificando a configura√ß√£o...');
    const checkCommands = [
      'npx prisma --version',
      'npx next --version',
      'node --version',
      'npm --version'
    ];

    for (const cmd of checkCommands) {
      try {
        const { stdout } = await execAsync(cmd);
        console.log(`‚úÖ ${cmd}: ${stdout.trim()}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  ${cmd}: N√£o dispon√≠vel`);
      }
    }

    console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Verifique o arquivo .env.local e ajuste as vari√°veis conforme necess√°rio');
    console.log('2. Execute "npm run dev" para iniciar o servidor de desenvolvimento');
    console.log('3. Acesse http://localhost:3000 no seu navegador');
    console.log('\nüí° Dica: Use o comando "npm run setup:dev" para configura√ß√£o r√°pida do desenvolvimento\n');

  } catch (error) {
    console.error('\n‚ùå Erro durante a configura√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar setup
setupProject();